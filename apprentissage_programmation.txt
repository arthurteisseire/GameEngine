- Chaque conditions dans le code est représentative de ce que l'on veut exprimer au plus haut niveau -> Toujours remettre chaque bout de code dans l'intégral du programme = remettre dans l'univsel

- Quand on peut composer deux foncteurs, on peut les composer à l'infini via les applicatives.

- Si on ne renvoie pas toujours une nouvelle valeur, alors il vaut mieux renvoyer un Maybe

- Il y a une dualité entre relation/structure = liberté/règles. Si on ajoute une règle à un type, on le fait dès le début.

- C'est le type qui drive l'implémentation. Si on voit loin, le type entier (Model) de notre programme drive tout le code/programme.

- Un type est un ensemble. Plus il est restreint, plus il est simple à tester et donc moins il est source d'erreur.

- Pour créer des fonctions qui composent:
  1. Créer une fonction qui en compose 2
  2. Creer une fonction qui en compose 3
  3. Dans celle qui en compose 3, utiliser des `let` en ajoutant les types de fonctions.
  4. Extraire les fonctions dans les `let`.
  5. Les composer, simplifier
